//
//  MovieListViewController.swift
//  MovieSample
//
//  Created by rajesh.rao on 06/10/2018.
//  Copyright (c) 2018 rajesh.rao. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol MovieListDisplayLogic: class{
    func displayMovies(viewModel: ListMovies.FetchMovies.MovieListViewModel)
    func displayError(error: Error)
}

class MovieListViewController: UIViewController, MovieListDisplayLogic, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate {
    var interactor: MovieListBusinessLogic?
    var router: (NSObjectProtocol & MovieListRoutingLogic & MovieListDataPassing)?
    var movies: [ListMovies.FetchMovies.MovieListViewModel.Movie] = []
    var alertController: UIAlertController?
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!
    
    let movieTableViewCellIdentifier = "MovieTableViewCellIdentifier"
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let interactor = MovieListInteractor()
        let presenter = MovieListPresenter()
        let router = MovieListRouter()
        
        self.interactor = interactor
        self.router = router
        
        interactor.presenter = presenter
        interactor.worker = MovieListWorker()
        
        presenter.viewController = self
        
        router.viewController = self
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "Search Title"
        self.tableView.register(UINib(nibName: "MovieTableViewCell", bundle: nil), forCellReuseIdentifier: movieTableViewCellIdentifier)
        let footerView = UIView(frame: .zero)
        footerView.backgroundColor = UIColor.darkGray
        tableView.tableFooterView = UIView(frame: .zero)
        
        searchBar.becomeFirstResponder()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if let selectedRow = tableView.indexPathForSelectedRow {
            tableView.deselectRow(at: selectedRow, animated: true)
        }
    }
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    // MARK: MovieListDisplayLogic

    func displayMovies(viewModel: ListMovies.FetchMovies.MovieListViewModel) {
        movies.append(contentsOf: viewModel.Movies)
        self.view.endEditing(true)
        tableView.reloadData()
    }
    
    func displayError(error: Error) {
        presentError(error)
    }
    
    // MARK: - Table view data source
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return movies.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: movieTableViewCellIdentifier) as? MovieTableViewCell else {
            fatalError("cell cannot be dequeued, somethings wrong")
        }
        
        let movie = movies[indexPath.row]
        cell.titleLabel.text = movie.title
        cell.synopsisLabel.text = movie.year
        if let imageURL = movie.poster {
            cell.thumbnailImageView.kf.setImage(with: URL(string: imageURL))
        }
        
        //Load more
        if indexPath.row == movies.count-3 {
            performSearch()
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToMovieDetails()
    }
}

extension MovieListViewController {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        // reset movies
        movies = []
        performSearch()
    }
    
    func performSearch() {
        guard  let searchTerm = searchBar.text else {
            return
        }
        interactor?.fetchMovies(searchTerm: searchTerm, offset: movies.count)
    }
    
    func presentError(_ error: Error) {
        if  let _ = self.presentedViewController {
            return
        }
        let alertController = UIAlertController(title:"Error", message: error.localizedDescription, preferredStyle: .alert)
        alertController.addAction(UIAlertAction.init(title: "Dismiss", style: .cancel, handler: nil))
        self.present(alertController, animated: true, completion: nil)
    }
}
